import { Location } from './Location'


export interface Junction<
    /**
     * The types of Locators that have been passed in from this junction's
     * parent.
     */
    ParentLocators extends Junction.Locators = any,

    /**
     * The typef of Locators that are produced by this junction's getLocators
     * method.
     */
    Locators extends Junction.Locators = any
> {
    /**
     * Specifies the names of the search parameters that this junction will
     * consume.
     * 
     * If an array of strings are specified, the given names will be consumed
     * if available.
     * 
     * For example, given a value of `["from", "to"]`, and a URL ending in
     * "?view=ALL&from=2013&to=2017", this junction's state`s `params` key
     * will contain the value `{ from: "2013", to: "2017" }`.
     * 
     * If an object is specified, keys with the value `true` are considered
     * required, and the route will not be matched unless the parameter is
     * available. Non-required keys will still be consumed, if available.
     * 
     * Note that a junction cannot consume any search parameters that its
     * parent junctions have already consumed. If it tries to, the parameters
     * will appear to be empty, and if in development mode, an error will be
     * logged to the console.
     */
    params?:
        string[] |
        {
            [name: string]: boolean
        },

    /**
     * A mapping of URL patterns (e.g. `/latest` or `/latest/:from/:to`) to 
     * junction objects that specify their content, params, locators, and
     * further child junctions to handle any remaining URL segments.
     * 
     * You can also provide a "loader" function that returns a promise to a
     * junction. This allows you to implement code splitting, i.e. loading a
     * junctions code once the user navigates to a relevant URL. It also
     * allows you to generate Junction objects at runtime, which can come in
     * handy for implementing pagination.
     * 
     * ### Patterns
     * 
     * Specific values are matched with higher priority than wildcards.
     * For example, `/junctions` is matched over `/:id`.
     * 
     * Note that you may not define multiple patterns that could match the
     * same pathname given arbitrary child junctions. For example, you
     * can't have both `/:q` and `/junctions/id`, as it introduces
     * conflicts: the wildcard will match `/junctions`, but if the junction
     * under `/:q` places a child at `/id`, who wins?
     * 
     * The exception is that wildcards can be used where they *entirely*
     * match their sibling patterns, e.g. `/:id` and `/junctions`. This is
     * because the conflict does not leak into child junctions.
     * 
     * For similar reasoning, search params and values can not be keyed
     * on, as they introduces cases where it is unclear which junction
     * should be matched. For example, does a junction that is keyed on
     * `/a?id` have priority over a child junction that is keyed on
     * `/a?q -> /b?id`? The answer is not obvious, so keying on search is
     * not supported for now.
     */
    children?: {
        [pattern: string]: Junction<Locators> | Junction.Loader<Locators, Junction<Locators>>,
    }

    /**
     * If true, specifies that this junction cannot itself be matched, but
     * instead exists for the sole purpose of holding its child junctions.
     * 
     * This option requires that `children` be set to some truthy value other
     * than the empty object `{}`.
     */
    isIntermediate?: boolean,

    /**
     * Allows you to specify arbitrary information that will be associated
     * with this junction, and will be available before the content is loaded.
     */
    meta?: any,

    /**
     * A function that returns the junction's primary content -- if any
     * exists. The content can be of any type. Typically, you may use a React
     * or Vue component, a markdown file, etc.
     * 
     * If this function returns a promise, it will be treated as a promise to
     * the content. As the proposed ES6 `import()` call returns a promise,
     * this allows you to dynamically load a page's content once it is
     * required.
     * 
     * This function will also receive a `locators` object and `getJunction`
     * function, making it possible to load the metadata of other
     * junctions to use within the content -- for example, to get the title
     * of a linked junction from its `meta` property.
     * 
     * In fact, the JunctionManager keeps track of calls to `getJunction` to
     * create a list of dependencies of each URL, which you can use to
     * prefetch any required data, for example by using HTTP/2 push.
     * 
     * *This option is mutually exclusive with `getRedirect`.*
     */
    getContent?: Junction.Loader<Locators, any>,

    /**
     * If a value is returned, the content for this junction will be
     * treated as a redirection to another junction.
     * 
     * This can be used to provide a default route within our children, to
     * create redirects from an old URL to a new one, etc.
     * 
     * Note that it is possible to use the full `location` object when
     * calculating a redirect, as the returned value should never be stored
     * anywhere, and thus can't go out of date if the junction's params change.
     * 
     * This option is mutually exclusive with `getContent`.
     */
    getRedirect?: (locators: Locators, location: Location) => Location | string | undefined

    /**
     * Define a set of Locators, or functions that return a `Location`
     * object. These locators will be available to this junction and its
     * children.
     * 
     * In a junction-based app, the Location of a junction will depend on the
     * location of the junctions' parents. As such, you won't always be able
     * to hardcode Locations when referring to other parts of the app.
     * 
     * To make up for this, each junction state receives a "Locators" object
     * from its parent, which contains a number of named functions that can
     * be used to reference other Locations within the app.
     * 
     * This function receives the parent's locators and the junction's current
     * location, and returns the Locators object that will be used by this
     * junction and *its* children.
     * 
     * ### A caveat
     * 
     * Locators can only be defined in a junction that does not define any
     * parameters, and that is not used within another junction that defines
     * parameters. This is because an update in parameters would cause an
     * update in the value of the `location` argument -- but we're not always
     * able to cleanly process these updates!
     * 
     * For example, an update to the locators used by `getContent` may cause
     * the result of a `preload` call to change, requiring a whole new React
     * component to be created!
     */
    getLocators?: (parentLocators: ParentLocators, location: Location) => Locators,
}


export namespace Junction {
    /**
     * The interface through which you access the app's current navigation
     * state.
     * 
     * Each Junction.State object represents the state of a Junction object
     * that is referred to by the application's active URL.
     */
    export interface State<J extends Junction=any> {
        location: Location,
        params?: { [name: string]: any },

        redirect?: Location,

        locators: Locators,        
        meta?: any,

        // NOTE: can only have child or content, but not both!

        child?: { pattern: keyof J['children'] } & State,
        childStatus?: 'fetched' | 'fetching' | 'fetchable' | 'error' | 'notfound',

        content?: any,
        contentStatus?: 'fetched' | 'fetching' | 'fetchable' | 'error',
    }


    /**
     * Locators are functions that return a `Location` object.
     * 
     * In a junction-based app, the Location of a junction will depend on the
     * location of the junctions' parents. As such, you won't always be able
     * to hardcode Locations when referring to other parts of the app.
     * 
     * To make up for this, each junction state receives a "Locators" object
     * from its parent, which contains a number of named functions that can
     * be used to reference other Locations within the app.
     * 
     * Additionally, junctions can define the locators object that their child
     * junctions will receive, using the `getLocators` option.
     */
    export type Locators = {
        [name: string]: () => Location
    }


    export type Loader<L extends Locators, ResultType> =
        (
            locators: L,
            getJunction: (location: Location) => Promise<Junction> | Junction | undefined
        ) => ResultType | Promise<ResultType>
}
