{"version":3,"sources":["../src/createMap.js"],"names":["mainFile","publicFolder","pathname","dependencies","dom","createDOM","push","rootJunction","window","manager","initialLocation","onEvent","eventType","location","state","getState","isBusy","Promise","resolve","reject","subscribe","newState","oldState","getJunction","junction","deepestState","child","childStatus","console","warn","log","redirect","map","meta","children","Object","keys","filter","pattern","indexOf","forEach","queue","processURL","length","shift","createMap"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;uEAEe,kBAAyBA,QAAzB,EAAmCC,YAAnC;AAAA;AAAA,gFAKX,iBAA0BC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,4CADR,GACuB,EADvB;AAEQC,mCAFR,GAEcC,UAAU,oBAAY;AAC5BF,iDAAaG,IAAb,CAAkBJ,QAAlB;AACH,iCAFS,CAFd;AAKQK,4CALR,GAKuBH,IAAII,MAAJ,CAAWD,YALlC;AAOQE,uCAPR,GAOkB,+BAAoB;AAC9BC,qDAAiB,EAAER,kBAAF,EADa;AAE9BK,8DAF8B;AAG9BI,6CAAS,iBAACC,SAAD,EAAYC,QAAZ,EAAyB;AAC9B;AACA;AACA;AACH;AAP6B,iCAApB,CAPlB;AAiBQC,qCAjBR,GAiBgBL,QAAQM,QAAR,EAjBhB;;AAAA,qCAmBQN,QAAQO,MAAR,EAnBR;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAoBc,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,2CACdV,QAAQW,SAAR,CAAkB,UAACC,QAAD,EAAWC,QAAX,EAAqBN,MAArB,EAAgC;AAC9CF,gDAAQO,QAAR;AACA,4CAAI,CAACL,MAAL,EAAa;AACTE;AACH;AACJ,qCALD,CADc;AAAA,iCAAZ,CApBd;;AAAA;AAAA;AAAA,uCA8ByBT,QAAQc,WAAR,CAAoB,EAAErB,kBAAF,EAApB,CA9BzB;;AAAA;AA8BQsB,wCA9BR;AAgCQC,4CAhCR,GAgCuBX,KAhCvB;;AAiCI,uCAAOW,aAAaC,KAApB,EAA2B;AACvBD,mDAAeA,aAAaC,KAA5B;AACH;;AAnCL,qCAqCQD,aAAaE,WArCrB;AAAA;AAAA;AAAA;;AAsCQC,wCAAQC,IAAR,wDAAkE3B,QAAlE;AAtCR;;AAAA;;AA0CI0B,wCAAQE,GAAR,CAAYL,YAAZ;;AAEA,oCAAIA,aAAaM,QAAjB,EAA2B;AACvBC,wCAAI9B,QAAJ,IAAgB;AACZA,kDAAUA,QADE;AAEZC,sDAAcA,YAFF;AAGZ4B,kDAAUN,aAAaM;AAHX,qCAAhB;AAKH,iCAND,MAOK;AACDC,wCAAI9B,QAAJ,IAAgB;AACZA,kDAAUA,QADE;AAEZC,sDAAcA,YAFF;AAGZ8B,8CAAMR,aAAaQ;AAHP,qCAAhB;AAKH;;AAED,oCAAIT,SAASU,QAAb,EAAuB;AACnBC,2CAAOC,IAAP,CAAYZ,SAASU,QAArB,EACKG,MADL,CACY;AAAA,+CAAWC,QAAQC,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAArC;AAAA,qCADZ,EAEKC,OAFL,CAEa,mBAAW;AAChBC,8CAAMnC,IAAN,CAAWQ,MAAMD,QAAN,CAAeX,QAAf,GAA0BoC,OAArC;AACH,qCAJL;AAKH;;AAjEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALW;;AAAA,4BAKII,UALJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACPrC,iCADO,GACK,gCAAiBL,QAAjB,EAA2BC,YAA3B,CADL;AAEPwC,6BAFO,GAEC,CAAC,GAAD,CAFD;AAGPT,2BAHO,GAGD,EAHC;;AAAA;AAAA,6BAyEJS,MAAME,MAzEF;AAAA;AAAA;AAAA;;AA0EHzC,gCA1EG,GA0EQuC,MAAMG,KAAN,EA1ER;AAAA;AAAA,+BA2EDF,WAAWxC,QAAX,CA3EC;;AAAA;AAAA;AAAA;;AAAA;AAAA,0DA8EJ8B,GA9EI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;aAAea,S;;;;WAAAA,S","file":"createMap.js","sourcesContent":["import createDOMFactory from './createDOMFactory'\nimport { JunctionManager } from 'junctions'\n\nexport default async function createMap(mainFile, publicFolder) {\n    let createDOM = createDOMFactory(mainFile, publicFolder)\n    let queue = ['/']\n    let map = {}\n\n    async function processURL(pathname) {\n        let dependencies = []\n        let dom = createDOM(pathname => {\n            dependencies.push(pathname)\n        })\n        let rootJunction = dom.window.rootJunction\n\n        let manager = new JunctionManager({\n            initialLocation: { pathname },\n            rootJunction,\n            onEvent: (eventType, location) => {\n                // TODO: can use this to build a map of dependencies for each chunk,\n                // as opposed to dependencies for each URL. Then can build a list of\n                // files to push with HTTP/2 each time somebody requests a chunk\n            }\n        })\n\n        let state = manager.getState()\n\n        if (manager.isBusy()) {\n            await new Promise((resolve, reject) =>\n                manager.subscribe((newState, oldState, isBusy) => {\n                    state = newState\n                    if (!isBusy) {\n                        resolve()\n                    }\n                })\n            )\n        }\n        \n        let junction = await manager.getJunction({ pathname })\n        \n        let deepestState = state\n        while (deepestState.child) {\n            deepestState = deepestState.child\n        }\n\n        if (deepestState.childStatus) {\n            console.warn(`Could not load the junction associated with path \"${pathname}\".`)\n            return\n        }\n\n        console.log(deepestState)\n\n        if (deepestState.redirect) {\n            map[pathname] = {\n                pathname: pathname,\n                dependencies: dependencies,\n                redirect: deepestState.redirect,\n            }\n        }\n        else {\n            map[pathname] = {\n                pathname: pathname,\n                dependencies: dependencies,\n                meta: deepestState.meta,\n            }\n        }\n\n        if (junction.children) {\n            Object.keys(junction.children)\n                .filter(pattern => pattern.indexOf(':') === -1)\n                .forEach(pattern => {\n                    queue.push(state.location.pathname + pattern)\n                })\n        }\n    }\n\n    while (queue.length) {\n        let pathname = queue.shift()\n        await processURL(pathname)\n    }\n\n    return map\n}\n"]}